using SquareDanceReasoning
using Documenter
using InteractiveUtils

DocMeta.setdocmeta!(SquareDanceReasoning, :DocTestSetup, :(using SquareDanceReasoning); recursive=true)


# Generate the formation hierarchy
include("formation_hierarchy.jl")
generate_formation_hierarchy()
generate_rule_hierarchy()

# Generate formation_drawings:
let
    d = joinpath(@__DIR__, "src/formation_drawings")
    mkpath(d)
    SquareDanceReasoning.generate_example_formation_diagrams(d)
    for f in readdir(joinpath(@__DIR__, d); join=true)
        (name, ext) = splitext(f)
        if ext == ".html"
            doc = open(f, "r") do io
                read(io, String)
            end
            open("$name.md", "w") do io
                println(io, "```@raw html")
                write(io, doc)
                println(io, "\n```")
            end
            rm(f)
        end
    end
    cp(joinpath(@__DIR__, "../src/xml/dancer_symbols.svg"),
       joinpath(@__DIR__, "src/dancer_symbols.svg");
       force=true)
end

# Generate a list of supported square dance calls:
let
    calls = []
    function walk(c)
        if isconcretetype(c)
            push!(calls, c)
        else
            for st in subtypes(c)
                walk(st)
            end
        end
    end
    walk(SquareDanceCall)
    sort!(calls; by = string)

    open(joinpath(@__DIR__, "src", "supported_square_dance_calls.md"),
         "w") do io
             println(io, "## Supported Square Dance Calls\n")
             println(io, "These are the calls that are currently implemented.")
             println(io, "They might not be implemented from all formations or all CallerLab programs.")
             println(io, "")
             for call in calls
                 fn = join(fieldnames(call), ", ")
                 println(io, "- **$call**: $fn")
             end
         end
end

makedocs(;
    modules=[SquareDanceReasoning],
    authors="MarkNahabedian <naha@mit.edu> and contributors",
    repo="https://github.com/MarkNahabedian/SquareDanceReasoning.jl/blob/{commit}{path}#{line}",
    sitename="SquareDanceReasoning.jl",
    format=Documenter.HTML(;
        prettyurls=false,
        canonical="https://MarkNahabedian.github.io/SquareDanceReasoning.jl",
        edit_link="main",
        assets=String[],
    ),
    pages=[
        "Home" => "index.md",
        "Coordinate System" => "coordinate_system.md",
        "Dancers, Their Positions and Directions" => "dancers.md", 
        "Motion Primitives" => "motion_primitives.md",
        "Supported Formations" => "formation_hierarchy.md",  # autogenerated
        "Rule Hierarchy" => "rule_hierarchy.md",             # autogenerated
        "Supported Square Dance Calls" =>
            "supported_square_dance_calls.md",               # autogenerated
        "Formation Drawings" =>
            map(readdir(joinpath(@__DIR__,
                                 "src/formation_drawings"))) do p
                _, filename = splitdir(p)
                formation, _ = splitext(filename)
                formation => joinpath("formation_drawings", filename)
            end
    ],
)

deploydocs(;
    repo="github.com/MarkNahabedian/SquareDanceReasoning.jl",
    devbranch="main",
)
