using SquareDanceReasoning
using Documenter

DocMeta.setdocmeta!(SquareDanceReasoning, :DocTestSetup, :(using SquareDanceReasoning); recursive=true)


# Generate the formation hierarchy
include("formation_hierarchy.jl")
generate_formation_hierarchy()
generate_rule_hierarchy()

# Generate formation_drawings:
let
    d = joinpath(@__DIR__, "src/formation_drawings")
    mkpath(d)
    SquareDanceReasoning.generate_example_formation_diagrams(d)
    for f in readdir(joinpath(@__DIR__, d); join=true)
        (name, ext) = splitext(f)
        if ext == ".html"
            doc = open(f, "r") do io
                read(io, String)
            end
            open("$name.md", "w") do io
                println(io, "```@raw html")
                write(io, doc)
                println(io, "\n```")
            end
            rm(f)
        end
    end
end

makedocs(;
    modules=[SquareDanceReasoning],
    authors="MarkNahabedian <naha@mit.edu> and contributors",
    repo="https://github.com/MarkNahabedian/SquareDanceReasoning.jl/blob/{commit}{path}#{line}",
    sitename="SquareDanceReasoning.jl",
    format=Documenter.HTML(;
        prettyurls=false,
        canonical="https://MarkNahabedian.github.io/SquareDanceReasoning.jl",
        edit_link="main",
        assets=String[],
    ),
    pages=[
        "Home" => "index.md",
        "Coordinate System" => "coordinate_system.md",
        "Motion Primitives" => "motion_primitives.md",
        "Supported Formations" => "formation_hierarchy.md",  # autogenerated
        "Rule Hierarchy" => "rule_hierarchy.md",             # autogenerated
        "Formation Drawings" =>
            map(readdir(joinpath(@__DIR__,
                                 "src/formation_drawings"))) do p
                _, filename = splitdir(p)
                formation, _ = splitext(filename)
                formation => joinpath("formation_drawings", filename)
            end
    ],
)

deploydocs(;
    repo="github.com/MarkNahabedian/SquareDanceReasoning.jl",
    devbranch="main",
)
